#!/bin/bash
POSIXLY_CORRECT=true
export POSIXLY_CORRECT
export LC_NUMERIC=en_US.UTF-8

a_trigger=0
b_trigger=0
t_trigger=0
w_trigger=0
flag_initialized=0
LOG=""
G_LOG=""
result=""
COMMAND=""

gethelp () {
   echo "USAGE OF SCRIPT: tradelog [-h|--help] [flag] [command] [LOG [LOG2 [...]]"
   echo "FLAGS:"
   echo "-a [YYYY-MM-DD HH:MM:SS]"
   echo "-b [YYYY-MM-DD HH:MM:SS]"
   echo "-t [TICKER]"
   echo "-w [WIDTH]"
   echo "COMMANDS:"
   echo "list-tick"
   echo "profit"
   echo "pos"
   echo "last-price"
   echo "hist-ord"
   echo "graph-pos"
}

if [[ $# == 0 ]] ; then
   cat
fi

after_call () {
   date=$1
   echo $date
   after_result="awk -F';' '\$1 > \"$date\" {print \$0}'"
}

before_call () {
   date=$1
   before_result="awk -F';' '\$1 < \"$date\" {print \$0}'"
}

ticker_call () {
   #First time calling -t
   if [ $t_trigger -eq 0 ] ; then
      ticker_result="\$2 ~ \"^$1$" #String value with name of ticker

   #-t called before
   else
      ticker_result="$ticker_result|^$1$"
   fi
}

flags_concat () {
   helpstring="awk -F';' '"
   #echo "CONTROL FLAGS STATE: "$t_trigger : $a_trigger : $b_trigger : $w_trigger DELETE ME LATER
   if [ $t_trigger -eq 1 ] ; then
      flag_initialized=1
      result="$input | $helpstring$ticker_result\" { print \$0 }'"
      #echo $result DELETE ME LATER
   fi

   if [ $a_trigger -eq 1 ] ; then
      if [ $flag_initialized -eq 1 ] ; then
         result="$result | $after_result"
         echo $result
      else
         flag_initialized=1
         result="$input | $result$after_result"
         echo $result
      fi
   fi

   if [ $b_trigger -eq 1 ] ; then
      if [ $flag_initialized -eq 1 ] ; then
         result="$result | $before_result"
      else
         flag_initialized=1
         result="$input | $result$before_result"
      fi
   fi

   # eval $result
}

#Check all flags in arguments given and store them in an array
while [ "$#" -gt 0 ] ; do 
   case "$1" in
      
      -h)   gethelp;;
      
      -a)   #echo "after $2" DELETE ME LATER
            after_call "$2"
            a_trigger=1
            shift
            shift
            ;;

      -b)   #echo "before $2" DELETE ME LATER
            before_call "$2"
            b_trigger=1;
            shift
            shift;;

      -t)   #echo "ticker $2"; DELETE ME LATER
            ticker_call "$2"
            t_trigger=1;
            shift
            shift
            ;;

      -w) #NAJIT SI NEJDELSI KLADNOU A ZAPORNOU HODNOTU
         WIDTH=$2
         w_trigger=1
         shift
         shift
         ;;
      
      -help)   gethelp;;

      list-tick | profit | pos | last-price | hist-ord | graph-pos)
         # echo "COMMAND $1 ZAVOLAN" DELETE ME LATER
         COMMAND="$1"
         shift
         ;;
      
      *.log)   
         if [[ log_trigger -eq 1 ]] ; then
            LOG="$LOG $1"
         else
            LOG="cat $1"
         fi
         log_trigger=1
         shift
         ;;

      *.log.gz) 
         if [ -z $glog_trigger ] ; then
            G_LOG="gzip -c -d $1"
         else
            G_LOG="$G_LOG $1"
         fi
         glog_trigger=1;
         shift
         ;;
   esac
done

if [ -z "$log_trigger" ] && [ -z "$glog_trigger" ] ; then
   input="cat"
elif [ -z "$glog_trigger" ] ; then
   input="$LOG"
elif [ -z "$log_trigger" ] ; then
   input="$G_LOG"
else
   input="cat $LOG; $G_LOG"
fi

flags_concat

execute_command () {
   if [[ $COMMAND == "profit" ]] ; then #Profit command
      if [ $flag_initialized -eq 1 ] ; then
         eval $result | awk -F';' '{if ($3=="sell") sum+=$4*$6; else sum-=$4*$6} END {printf "%.2f\n", sum;}'
      else
         eval "$input | awk -F';' '{if (\$3==\"sell\") sum+=\$4*\$6; else sum-=\$4*\$6} END {printf \"%.2f\n\", sum;}'"
      fi
   elif [[ $COMMAND == "list-tick" ]] ; then #List-tick command
      if [ $flag_initialized -eq 1 ] ; then
         eval $result | awk -F';' '{ print $2 }' | sort -u
      else
         eval "$input | awk -F';' '{ print \$2 }'" | sort -u
      fi

   elif [[ $COMMAND == "pos" ]] ; then
      if [ $flag_initialized -eq 1 ] ; then
         eval $result | awk -F';' ' {
            if ($3=="sell") {
               a[$2] -= $6; 
               p[$2]=$4;
               } 
            else {
               a[$2] += $6; 
               p[$2]=$4;}
            } 
            END { 
               for (i in a) {
               if (length(a[i]*p[i]) > b) {
                  b=length(a[i]*p[i])
               }
               }
            for (i in a) {
               printf("%-10s: %*.2f\n"), i, b, a[i] * p[i]}
            }' | sort -k3 -n -r
      else
         eval "$input | awk -F';' ' {
            if (\$3==\"sell\") {
               a[\$2] -= \$6; 
               p[\$2]=\$4;
               } 
            else {
               a[\$2] += \$6;
               p[\$2]=\$4;
            }}
            END { 
            for (i in a) {
               if (length(a[i]*p[i] > b)) {
                  b=length(a[i]*p[i])
               }
            }
            for (i in a) {
               printf(\"%-10s: %*.2f\n\"), i, b, a[i] * p[i]}
            }'" | sort -k3 -n -r
      fi

   elif [[ $COMMAND == "last-price" ]] ; then
      if [ $flag_initialized -eq 1 ] ; then
         eval $result | awk -F';' ' {
            a[$2]=$4; 
            if (length($4) > b) { 
               b=length($4); 
               y=$0 
            }} 
            END { 
               for (i in a) {
                  printf("%-10s: %*.2f\n", i, b, a[i]); 
            }}' | sort
      else
         eval "$input | awk -F';' ' { 
            a[\$2]=\$4;
            if (length(\$4)>b) {
               a[\$2]=\$4; 
               b=length(\$4);  
            }} 
            END {
            for (i in a) {
            printf(\"%-10s: %*.2f\n\",i,b,a[i]);

            }}'" | sort
      fi

   elif [[ $COMMAND == "hist-ord" ]] ; then
      if [ $w_trigger -eq 0 ] ; then
         WIDTH=-1
      fi
      if [ $flag_initialized -eq 1 ] ; then
         eval "$input | $result" | awk -v width=$WIDTH -F';' ' {
            tick[$2]++;
         } 
         END {
            for (j in tick) {
               if (tick[j] > a) {
                  a=tick[j];
               }
            }
            if (width == -1){
               hodnota=1
            }
            else {
               hodnota=int (a)/width;
            }
            for (i in tick) {
               printf("%-10s: ", i);
               for (x=0;x < int (tick[i])/hodnota; x++) {
                  printf("#");
               }
               printf("\n");
            }
         }' | sort
      else
         eval "$input" | awk -v width=$WIDTH -F';' ' {
            tick[$2]++;
         } 
         END {
            for (j in tick) {
               if (tick[j] > a) {
                  a=tick[j];
               }
            }
            if (width == -1){
               hodnota=1
            }
            else {
               hodnota=int (a)/width;
            }
            for (i in tick) {
               printf("%-10s: ", i);
               for (x=0;x < int (tick[i])/hodnota; x++) {
                  printf("#");
               }
               printf("\n");
            }
         }' | sort
      fi
   elif [[ $COMMAND == "graph-pos" ]] ; then
      if [ $w_trigger -eq 0 ] ; then
         WIDTH=-1
      fi
      if [ $flag_initialized -eq 1 ] ; then
         eval "$input | $result" | awk -v width=$WIDTH -F';' ' {
            if ($3=="sell") {
               a[$2] -= $6; 
               p[$2]=$4;
            } 
            else {
               a[$2] += $6; 
               p[$2]=$4;
            }}
            END {
               b=0;
               for (j in a) {
                  c=(a[j]*p[j]);
                  if (c > 0) {
                     if (c > b) {
                        b=c;
                     }
                  }
                  else {
                     c=c*(-1)
                     if (c > b) {
                        b=c;
                     }
                  }
               }
               if (width == -1){
                  hodnota=1000;
               }
               else {
                  hodnota=int (b)/width;
                  if (hodnota < 0) {
                     hodnota=hodnota*(-1);
                  }
               }
               for (i in a) {
                  printf("%-10s:", i);
                  if ((a[i]*p[i]) > 0){
                     for (x=0; x < int (int (a[i]*p[i])/hodnota); x++) {
                        if (x==0) {
                           printf(" ");
                        }
                        printf("#");
                     }
                  }
                  else {
                     for (x=0; x < int (int (a[i]*p[i])/hodnota)*(-1); x++) {
                        if (x==0) {
                           printf(" ");
                        }
                        printf("!");
                     }
                  }
                  printf("\n");
               }
            } ' | sort
      else
         echo $WIDTH
         eval "$input" | awk -v width=$WIDTH -F';' ' {
            if ($3=="sell") {
               a[$2] -= $6; 
               p[$2]=$4;
            } 
            else {
               a[$2] += $6; 
               p[$2]=$4;
            }}
            END {
               b=0;
               for (j in a) {
                  c=(a[j]*p[j]);
                  if (c > 0) {
                     if (c > b) {
                        b=c;
                     }
                  }
                  else {
                     c=c*(-1)
                     if (c > b) {
                        b=c;
                     }
                  }
               }
               if (width == -1){
                  hodnota=1000;
               }
               else {
                  hodnota=int (b)/width;
                  if (hodnota < 0) {
                     hodnota=hodnota*(-1);
                  }
               }
               for (i in a) {
                  printf("%-10s:", i);
                  if ((a[i]*p[i]) > 0){
                     for (x=0; x < int (int (a[i]*p[i])/hodnota); x++) {
                        if (x==0) {
                           printf(" ");
                        }
                        printf("#");
                     }
                  }
                  else {
                     for (x=0; x < int (int (a[i]*p[i])/hodnota)*(-1); x++) {
                        if (x==0) {
                           printf(" ");
                        }
                        printf("!");
                     }
                  }
                  printf("\n");
               }
            } ' | sort
      fi
   else
      echo "Else branch"
   fi
}

if [[ $COMMAND == "" ]] ; then
   if [[ $result == "" ]] ; then
      if [[ w_trigger -eq 0 ]] ; then
         $LOG
      fi
   else
      eval $result
   fi
else
   execute_command
fi